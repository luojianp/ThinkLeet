Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
For example, Given [100, 4, 200, 1, 3, 2], The longest consecutive elements sequence is [1,
2, 3, 4]. Return its length: 4.
Your algorithm should run in O(n) complexity.
解决：法1:hash存储元素，然后遍历hash表，每个元素再左右遍历连续元素。时间复杂度o(n) 空间复杂度o(n)
注意：时间复杂度为o(n)，因为遍历hash的时候可以将用完的元素删除，则最外层循环就不会再用这个元素。
本质：此题是物理无序，找到逻辑有序序列。
法2：排序再遍历。时间复杂度o(nlg(n))，空间复杂度o(1)



变式：
逻辑序列指（已经排序的序列，但是并不排），物理序列指现在序列的数据分布。 
1 逻辑序列找到最长的间隔为k的序列。 原题基础上，遍历hash时候跳跃遍历。 时间复杂度o(n) 空间复杂度o(1) 
2 物理上的连续序列。即，按照序列中的分布最长连续序列。 直接遍历，有个max记录最长长度，双指针start ,end ，时间复杂度o(n)
空间复杂度o(1)
3 物理上的最长不重复元素序列：直接遍历，hash存储已访问元素+元素索引，start，end记录当前序列，找到重复元素则更新start
为hash中对应重复元素的位置。时间复杂度o(n)，空间复杂度o(1)。
变式：元素为字符，元素为指定长度的单词。
变式：允许重复k次，将原算法的hash存储相应的重复次数，其他和原算法一致。
4 之前（1-3为看单个序列）
 多序列问题：
 两个序列： T,S，T存在于S中的最短序列。(15.5 Minimum Window Substring)。和3解法相似，hash存储已经出现的T中元素，start,end
 维护滑动窗口。end不断增加，直到包含所有元素，然后start增加，直到缺少一个元素。时间复杂度o(n),空间复杂度o(n)
  变式：多个序列同时包含于S中，（如果不要求顺序）可以将多个序列合并为一个，然后hash中统计出现数。
  （如果要求子序列得保持原顺序，问题就复杂了），先分别找到T1,T2,..,Tn和S的所有包含的最小序列（T1可能包含多次）。然后合并组
  合所有区间，找到最小区间。减少复杂度，分治法，切分，一侧跟一侧的合并。
 两个序列：strstr：暴扫.时间复杂度o(m*n) 。空间复杂度o(1)
5 并行化：
  将数据range分区，然后每个分区按照上面方法做左右探测，三种情况，（1）最左侧未完 （2）左右两侧都断开 （3）最右侧未完 
  map为 左右的中间数为key，value为结果，对左右都断开的用特殊的key,INTMAX
  reduce汇总，将结果拼接聚集。key((1,2,3代表三种情况)) 。
