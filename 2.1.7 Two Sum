Given an array of integers, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, where
index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not
zero-based.
You may assume that each input would have exactly one solution.
Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2
解法：
(1)暴扫，两层循环，时间复杂度o(m*n)空间o(1
(2)第一轮遍历hash存，第二轮去hash中找。时间复杂度o(n),空间复杂度o(n)。
(3)方法3：先排序，然后左右夹逼，排序O(n log n)，左右夹逼O(n)，最终O(n log n)。但是注
意，这题需要返回的是下标，而不是数字本身，因此这个方法行不通。

变式：
区别在于，返回的是数本身（更容易，可以排序）还是数的下标索引。是否排序过（不允许排序意味着不允许左右夹逼，复杂度无法
从n2将到nlg(n)）。如果不存在找最近的数。

（1）排序过的 2 sum 返回数:用方法3
（2）未排序过的 3 sum,返回数(2.1.8 3Sum) :
     （0）暴扫 时间复杂度o(n3)，空间复杂度o(1)
     （1）先排序，然后左右夹逼，时间复杂度o(n2)，空间复杂度o(1)
     (2)排序，然后计算两两组合结果，hash缓存，然后遍历一次找第三个数。时间复杂度(nlog(n))空间复杂度(o(n))
     未排序过的4 sum 返回数(2.1.10 4Sum):
     (0)暴扫 时间复杂度o(n4)，空间复杂度o(1)
     (1)先排序然后 ，暴扫两轮，左右夹逼。 时间复杂度o(n3) 空间复杂度o(1)
     (1)暴扫两轮缓存结果，然后排序，左右夹逼加上，缓存结果 。时间复杂度o(n2)空间复杂度o(n2)
(3)推广n sum :
 方法：1cache缓存 2排序，左右夹逼
 (4)不找准确数，找最近似相等（2.1.9 3Sum Closest）
   先排序，然后左右夹逼。
