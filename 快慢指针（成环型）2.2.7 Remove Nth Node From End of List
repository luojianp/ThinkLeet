Given a linked list, remove the nth node from the end of list and return its head.
For example, Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
• Given n will always be valid.
解法：两个指针间隔k距离，然后最后一个指针到末尾时，删除前面指针指向的元素。时间复杂度o(n)，空间复杂度o(1) 


变式：
（1）判断是否有环（2.2.11 Linked List Cycle）：
法1：（本质也是图判断是否有环问题）hash缓存访问节点，时间复杂度o(n)空间复杂度o(1)
法2：快慢指针，时间复杂度o(n)，空间复杂度o(1)
（2）找环入口点（2.2.12 Linked List Cycle II）：
这个就相对于（1）复杂有推导

(3)并行化：

如果对一个大链表切分，会切断链表，进而无法判断是否有环。
其实是可以的，


切分链，为子链，然后在每个分区形成 （入口1，出口2）对
最后reduce节点进行(入口1，出口2) （入口2，出口1）的合并，如果最后能归并出环，则证明是带环的！
